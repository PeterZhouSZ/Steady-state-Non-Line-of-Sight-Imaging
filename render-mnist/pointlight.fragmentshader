#version 420 core

// Interpolated values from the vertex shaders
in vec3 Normal_cameraspace;
in vec2 UV;
in vec3 LightDirection_cameraspace;

in float lp;
in float pv;
in float costerm;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

uniform float istex;

uniform vec3 MaterialAmbient;
uniform vec3 MaterialDiffuse;
uniform vec3 MaterialSpecular;

uniform float Shininess;

void main(){

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n, l ), 0, 1 );
	
	// Light emission properties
	// You probably want to put them as uniforms
	float LightPower = Shininess;
	
	vec3 EyeDirection_cameraspace = vec3(0, 0, 1);
	// Eye vector (towards the camera)
	vec3 E = normalize( EyeDirection_cameraspace );
	// Direction in which the triangle reflects the light
	vec3 R = reflect( -l, n );
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E, R ), 0, 1 );
	
	float factor = 0.9f;
	float factorlp = factor / ( lp * lp );
	float factorpv = factor / ( pv * pv );
	
	vec3 LightColor = vec3(1, 1, 1);
	vec3 LightColorDistance = factorlp * LightColor;
	
	vec3 ObjectColor;
	if (istex > 0)
	{
		ObjectColor = texture( myTextureSampler, UV ).rgb;
	}
	else
	{
		ObjectColor = MaterialDiffuse;
	}
	
	vec3 MaterialAmbientColor;
	vec3 MaterialDiffuseColor;
	vec3 MaterialSpecularColor;
	
	if (LightPower > 0.5)
	{
	MaterialAmbientColor = LightColor * MaterialAmbient;
	MaterialDiffuseColor = factorpv * LightColorDistance * vec3(0, 0, 0) * cosTheta;
	MaterialSpecularColor = LightColorDistance * vec3(1, 1, 1) * pow(cosAlpha, LightPower);	
	}
	else
	{
	MaterialAmbientColor = LightColor * MaterialAmbient;
	MaterialDiffuseColor = factorpv * LightColorDistance * vec3(1, 1, 1) * cosTheta;
	MaterialSpecularColor = LightColorDistance * vec3(0, 0, 0) * pow(cosAlpha, LightPower);	
	}
	
	color = 
		// Ambient : simulates indirect lighting
		(MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor 
		// Specular : reflective highlight, like a mirror
		+ MaterialSpecularColor ) * ObjectColor;
	
	color = costerm * color;
	// color = clamp( costerm * color, 0, 1 );
}

